#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os.path

from telebot import types
from insales import InSalesApi
from lib import query_db, query_insales
import config
import qrcode

api = InSalesApi.from_credentials(config.account_name, config.api_key, config.api_pass)


def start():
    markup = types.InlineKeyboardMarkup()
    button_order = types.InlineKeyboardButton("–ó–∞–∫–∞–∑", callback_data='order')
    button_account = types.InlineKeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='account')
    button_historyOrders = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data='historyOrders')
    markup.row(button_order, button_account)
    markup.row(button_historyOrders)
    text = (f'<u><b>–ó–∞–∫–∞–∑</b></u> - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é\n\n'
            f'<u><b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b></u> - –õ–∏—á–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n'
            f'<u><b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤</b></u> - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–Ω–Ω–µ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤')
    return text, markup


def order():
    markup = types.InlineKeyboardMarkup()
    button_ruble = types.InlineKeyboardButton("‚ÇΩ", callback_data='order-currency_RUR')
    button_dollar = types.InlineKeyboardButton("$", callback_data='order-currency_USD')
    markup.row(button_ruble, button_dollar)
    text = f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É'
    return text, markup


def account(message):
    markup = types.InlineKeyboardMarkup()
    button_main = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')
    markup.row(button_main)
    text = (f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n'
            f'üîë <b>–õ–æ–≥–∏–Ω:</b>@{message.chat.username}\n'
            f'<b>üí≥ ID:</b> <code>{message.chat.id}</code>\n'
            f'<b>üíµ –ü–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É:</b> <code>0 —Ä—É–±</code>\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ')
    return text, markup


def historyOrders():
    markup = types.InlineKeyboardMarkup()
    button_main = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')
    markup.row(button_main)
    text = (f'–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–¥–∞–∂\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'10.03.2022 1—à—Ç <b>–ö—É—Ä—Ç–∫–∞ –∫–æ–∂–∞–Ω–∞—è Fendi</b> 1620$ –°–±–µ—Ä–±–∞–Ω–∫ <code>+79999999999</code>\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'09.03.2022 3—à—Ç <b>The Land of Legends</b> 2036‚ÇΩ –¢–∏–Ω—å–∫–æ—Ñ—Ñ <code>+79999999999</code>\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'09.03.2022 1—à—Ç <b>–ê—Å—Ç—Ä–∞–≥–∞–Ω –∂–µ–Ω—Å–∫–∏–π –±–µ–∂–µ–≤—ã–π Valentino</b> 999$ –ö—Ä–µ–¥–∏—Ç <code>+79999999999</code>\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ')
    return text, markup


def paymentGateway():
    markup = types.InlineKeyboardMarkup()
    text = f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'
    types_payment = [[i['title'], i['id']] for i in api.get_payment_gateways()]
    for payment in types_payment:
        name, id = payment
        markup.row(types.InlineKeyboardButton(name, callback_data=f'order-paymentGateways_{id}'))
    return text, markup


def enter_product_id():
    markup = types.InlineKeyboardMarkup()
    text = f'–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>340224712</code>'
    return text, markup


def product_info(chat_id, product):
    markup = types.InlineKeyboardMarkup()
    name = product["title"]
    price = query_insales.convert_price(chat_id, product["variants"][0]["base-price"])
    currency = query_db.get_currency_name(chat_id=chat_id)
    text = (f'‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:</b>\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: <code>{name}</code>\n'
            f'<b>–¶–µ–Ω–∞</b>: <code>{price} {currency}</code>\n'
            f'<b>–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ</b>: <code>{product["variants"][0]["quantity"]} —à—Ç</code>')
    button_current_price = types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É",
                                                      callback_data=f'order-price_current_{price}')
    button_new_price = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data='order-price_new')
    photos = [types.InputMediaPhoto(i) for i in query_insales.get_photos(product['id'])]
    markup.row(button_current_price)
    markup.row(button_new_price)
    return text, markup, photos


def enter_product_price():
    markup = types.InlineKeyboardMarkup()
    text = f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞'
    return text, markup


def enter_product_quantity():
    markup = types.InlineKeyboardMarkup()
    text = f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
    button_one = types.InlineKeyboardButton("1", callback_data='order-quantity_1')
    button_two = types.InlineKeyboardButton("2", callback_data='order-quantity_2')
    button_three = types.InlineKeyboardButton("3", callback_data='order-quantity_3')
    markup.row(button_one, button_two, button_three)
    return text, markup


def enter_client_name():
    markup = types.InlineKeyboardMarkup()
    text = f'–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é)'
    return text, markup


def enter_client_phone():
    markup = types.InlineKeyboardMarkup()
    text = (f'–í–≤–µ–¥–∏—Ç–µ —Å–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç–∞\n'
            f'–ù–∞–ø—Ä–∏–º–µ—Ä: <code>79934055804</code>')
    return text, markup


def enter_client_mail():
    markup = types.InlineKeyboardMarkup()
    text = (f'–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –∫–ª–∏–µ–Ω—Ç–∞\n'
            f'–ù–∞–ø—Ä–∏–º–µ—Ä: <code>test@test.ru</code>')
    return text, markup


def create_order(chat_id):
    markup = types.InlineKeyboardMarkup()
    order = query_db.get_order_info(chat_id=chat_id)
    product_name = api.get_product(order.product_id)['title']
    currency = query_db.get_currency_name(chat_id=chat_id)
    payment_name = query_insales.get_name_paymentGateway(order.paymentGateway)
    text = (f'‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n'
            f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
            f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: <code>{product_name}</code>\n'
            f'<b>–¶–µ–Ω–∞</b>: <code>{order.price} {currency}</code>\n'
            f'<b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã</b>: <code>{payment_name}</code>\n'
            f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>: <code>{order.quantity}</code>\n'
            f'<b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</b>: <code>{order.client_name}</code>\n'
            f'<b>–°–æ—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç–∞</b>: <code>+{order.client_phone}</code>\n'
            f'<b>–ò—Ç–æ–≥–æ</b>: <code>{order.price * order.quantity} {currency}</code>')
    button_create_order = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='—Åreate')
    button_main = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')
    markup.row(button_create_order)
    markup.row(button_main)
    return text, markup


def url_on_payment(order):
    markup = types.InlineKeyboardMarkup()
    if order['payment-gateway-id'] in [2749759, 2814404]:
        text = (f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É\n'
                f'http://market-ra.ru/payments/external/{order["payment-gateway-id"]}/create?key={order["key"]}')

        qr = False
    elif order['payment-gateway-id'] in [2099426]:
        payment = query_insales.get_paymentGateway(2099426)
        text = "QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞"
        qr_path = os.path.join(config.dir_path, 'utils', 'sbpqrcode')
        firstName, secondName, middleName = order["client"]["name"].split()
        qrcode.make(f'ST00012|Name=RaMarket'
                    f'|PersonalAcc={payment["settlement-account"]}|BankName={payment["bank-name"]}'
                    f'|BIC={payment["bin"]}|CorrespAcc={payment["correspondent-account"]}|PayeeINN={payment["inn"]}'
                    f'|LastName={secondName}|FirstName={firstName}|MiddleName={middleName}'
                    f'|Purpose=–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞|Sum={int(order["total-price"])}00'
                    ).save(qr_path)
        qr = open(qr_path, 'rb')
    else:
        text = "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
        qr = False
    return text, markup, qr
